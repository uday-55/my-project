from reportlab.lib.pagesizes import letter, A4
from reportlab.lib import colors
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from datetime import datetime
import io

def generate_transaction_report(blockchain, filename="report.pdf"):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    elements = []
    styles = getSampleStyleSheet()
    
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        textColor=colors.HexColor('#2ecc71'),
        alignment=TA_CENTER,
        spaceAfter=30
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=16,
        textColor=colors.HexColor('#27ae60'),
        spaceAfter=12
    )
    
    title = Paragraph("Oilseed Value Chain Platform", title_style)
    elements.append(title)
    
    subtitle = Paragraph(f"Transaction Report - {datetime.now().strftime('%B %d, %Y')}", styles['Normal'])
    elements.append(subtitle)
    elements.append(Spacer(1, 20))
    
    stats = blockchain.get_statistics()
    
    summary_heading = Paragraph("Summary Statistics", heading_style)
    elements.append(summary_heading)
    
    summary_data = [
        ["Metric", "Value"],
        ["Total Transactions", str(stats['total_transactions'])],
        ["Total Volume (kg)", f"{stats['total_volume']:,.2f}"],
        ["Total Value (₹)", f"{stats['total_value']:,.2f}"],
        ["Blockchain Status", "Valid ✓" if blockchain.is_chain_valid() else "Invalid ✗"]
    ]
    
    summary_table = Table(summary_data, colWidths=[3*inch, 3*inch])
    summary_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2ecc71')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    elements.append(summary_table)
    elements.append(Spacer(1, 20))
    
    trans_heading = Paragraph("Transaction Details", heading_style)
    elements.append(trans_heading)
    
    transactions = blockchain.get_all_transactions()
    
    if transactions:
        trans_data = [["Farmer", "Crop", "Quantity (kg)", "Price (₹)", "Date"]]
        
        for trans in transactions[-10:]:
            trans_data.append([
                trans['farmer_name'],
                trans['crop_type'],
                f"{trans['quantity']:,.2f}",
                f"{trans['price']:,.2f}",
                trans['timestamp'].split()[0]
            ])
        
        trans_table = Table(trans_data, colWidths=[1.5*inch, 1.2*inch, 1.2*inch, 1.2*inch, 1.5*inch])
        trans_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#27ae60')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('FONTSIZE', (0, 1), (-1, -1), 8)
        ]))
        elements.append(trans_table)
    else:
        elements.append(Paragraph("No transactions recorded yet.", styles['Normal']))
    
    elements.append(Spacer(1, 30))
    footer = Paragraph("Generated by AI-Enabled Oilseed Value Chain Platform", styles['Italic'])
    elements.append(footer)
    
    doc.build(elements)
    buffer.seek(0)
    return buffer

def generate_farmer_report(farmer_name, crop_type, quantity, price, predictions, badges):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    elements = []
    styles = getSampleStyleSheet()
    
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        textColor=colors.HexColor('#2ecc71'),
        alignment=TA_CENTER,
        spaceAfter=30
    )
    
    title = Paragraph("Farmer Performance Report", title_style)
    elements.append(title)
    
    subtitle = Paragraph(f"Report for {farmer_name} - {datetime.now().strftime('%B %d, %Y')}", styles['Normal'])
    elements.append(subtitle)
    elements.append(Spacer(1, 20))
    
    info_data = [
        ["Farmer Name", farmer_name],
        ["Crop Type", crop_type],
        ["Quantity Sold (kg)", f"{quantity:,.2f}"],
        ["Price (₹/quintal)", f"{price:,.2f}"],
        ["Total Earnings (₹)", f"{(quantity * price / 100):,.2f}"]
    ]
    
    info_table = Table(info_data, colWidths=[2.5*inch, 3.5*inch])
    info_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#27ae60')),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (1, 0), (1, -1), colors.lightgrey)
    ]))
    elements.append(info_table)
    elements.append(Spacer(1, 20))
    
    if badges:
        badge_para = Paragraph(f"<b>Badges Earned:</b> {', '.join(badges)}", styles['Normal'])
        elements.append(badge_para)
        elements.append(Spacer(1, 20))
    
    pred_heading = Paragraph("<b>Price Predictions (Next 7 Days)</b>", styles['Heading2'])
    elements.append(pred_heading)
    
    pred_data = [["Date", "Predicted Price (₹/quintal)"]]
    for pred in predictions:
        pred_data.append([pred['date'], f"{pred['price']:,.2f}"])
    
    pred_table = Table(pred_data, colWidths=[3*inch, 3*inch])
    pred_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2ecc71')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige)
    ]))
    elements.append(pred_table)
    
    elements.append(Spacer(1, 30))
    footer = Paragraph("Thank you for being part of the Oilseed Value Chain Platform!", styles['Italic'])
    elements.append(footer)
    
    doc.build(elements)
    buffer.seek(0)
    return buffer
