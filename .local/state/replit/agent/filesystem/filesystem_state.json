{"file_contents":{"static/js/translations.js":{"content":"const translations = {\n    en: {\n        // Headers and Labels\n        farmer_dashboard: \"Farmer Dashboard\",\n        ai_price_predictor: \"AI Price Predictor\",\n        voice_control: \"Voice Control\",\n        select_crop: \"Select Crop Type\",\n        predict_prices: \"Predict Prices\",\n        crop_advisory: \"Crop Advisory\",\n        select_crop_info: \"Select a crop and click 'Predict Prices' to see advisory information\",\n        sell_crop: \"Sell Your Crop\",\n        your_name: \"Your Name\",\n        crop_type: \"Crop Type\",\n        quantity: \"Quantity (kg)\",\n        price: \"Price (‚Çπ/quintal)\",\n        sell_crop_btn: \"Sell Crop\",\n        your_badges: \"Your Badges\",\n        earn_badges: \"Complete transactions to earn badges!\",\n        marketplace_map: \"Marketplace Map - Find Farmers, Buyers & Warehouses\",\n        farmers: \"üü¢ Farmers\",\n        buyers: \"üîµ Buyers\",\n        warehouses: \"üü† Marketplaces/Warehouses\",\n        ai_assistant: \"AI Assistant\",\n        ai_greeting: \"Hello! I'm here to help with oilseed farming, pricing, weather, and more. Ask me anything!\",\n        download_report: \"Download My Report (PDF)\",\n        \n        // Crops\n        soybean: \"Soybean\",\n        groundnut: \"Groundnut\",\n        mustard: \"Mustard\",\n        sunflower: \"Sunflower\",\n        \n        // Placeholders\n        enter_name: \"Enter your name\",\n        enter_quantity: \"Enter quantity\",\n        enter_price: \"Enter price\",\n        search_map: \"Search for farms, buyers, or warehouses...\",\n        chat_placeholder: \"Ask about prices, weather, pests...\",\n        \n        // Dynamic Content\n        price_forecast: \"7-Day Price Forecast\",\n        date: \"Date\",\n        weather: \"Weather\",\n        pest_risk: \"Pest Risk\",\n        sowing_time: \"Sowing Time\",\n        harvest_time: \"Harvest Time\",\n        tip: \"Tip\",\n        success: \"Success!\",\n        block_hash: \"Block Hash\",\n        congratulations: \"Congratulations! Your badges:\",\n        transaction_success: \"Transaction recorded on blockchain successfully!\",\n        fill_all_fields: \"Please fill in all fields\",\n        listening: \"Listening...\",\n        heard: \"Heard\",\n        \n        // Advisory Messages\n        moderate_rainfall: \"Moderate rainfall expected. Good for growth.\",\n        low_pest_risk: \"Low risk of pod borer. Monitor regularly.\",\n        best_sowing: \"Best: June-July (Kharif season)\",\n        harvest_oct_nov: \"October-November\",\n        drainage_tip: \"Ensure proper drainage to prevent waterlogging\"\n    },\n    hi: {\n        // Headers and Labels\n        farmer_dashboard: \"‡§ï‡§ø‡§∏‡§æ‡§® ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°\",\n        ai_price_predictor: \"‡§è‡§Ü‡§à ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§ï‡•ç‡§§‡§æ\",\n        voice_control: \"‡§Ü‡§µ‡§æ‡§ú ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£\",\n        select_crop: \"‡§´‡§∏‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç\",\n        predict_prices: \"‡§ï‡•Ä‡§Æ‡§§‡•ã‡§Ç ‡§ï‡•Ä ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§ï‡§∞‡•á‡§Ç\",\n        crop_advisory: \"‡§´‡§∏‡§≤ ‡§∏‡§≤‡§æ‡§π\",\n        select_crop_info: \"‡§´‡§∏‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç ‡§î‡§∞ ‡§∏‡§≤‡§æ‡§π ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è '‡§ï‡•Ä‡§Æ‡§§‡•ã‡§Ç ‡§ï‡•Ä ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§ï‡§∞‡•á‡§Ç' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç\",\n        sell_crop: \"‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤ ‡§¨‡•á‡§ö‡•á‡§Ç\",\n        your_name: \"‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ\",\n        crop_type: \"‡§´‡§∏‡§≤ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞\",\n        quantity: \"‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ (‡§ï‡§ø‡§≤‡•ã)\",\n        price: \"‡§Æ‡•Ç‡§≤‡•ç‡§Ø (‚Çπ/‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤)\",\n        sell_crop_btn: \"‡§´‡§∏‡§≤ ‡§¨‡•á‡§ö‡•á‡§Ç\",\n        your_badges: \"‡§Ü‡§™‡§ï‡•á ‡§¨‡•à‡§ú\",\n        earn_badges: \"‡§¨‡•à‡§ú ‡§Ö‡§∞‡•ç‡§ú‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡•á‡§®‡§¶‡•á‡§® ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§∞‡•á‡§Ç!\",\n        marketplace_map: \"‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§Æ‡§æ‡§®‡§ö‡§ø‡§§‡•ç‡§∞ - ‡§ï‡§ø‡§∏‡§æ‡§®, ‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞ ‡§î‡§∞ ‡§ó‡•ã‡§¶‡§æ‡§Æ ‡§ñ‡•ã‡§ú‡•á‡§Ç\",\n        farmers: \"üü¢ ‡§ï‡§ø‡§∏‡§æ‡§®\",\n        buyers: \"üîµ ‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞\",\n        warehouses: \"üü† ‡§¨‡§æ‡§ú‡§æ‡§∞/‡§ó‡•ã‡§¶‡§æ‡§Æ\",\n        ai_assistant: \"‡§è‡§Ü‡§à ‡§∏‡§π‡§æ‡§Ø‡§ï\",\n        ai_greeting: \"‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§§‡§ø‡§≤‡§π‡§® ‡§ï‡•Ä ‡§ñ‡•á‡§§‡•Ä, ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§£, ‡§Æ‡•å‡§∏‡§Æ ‡§î‡§∞ ‡§Ö‡§ß‡§ø‡§ï ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Å‡•§ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ‡•á‡§Ç!\",\n        download_report: \"‡§Æ‡•á‡§∞‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç (PDF)\",\n        \n        // Crops\n        soybean: \"‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§®\",\n        groundnut: \"‡§Æ‡•Ç‡§Ç‡§ó‡§´‡§≤‡•Ä\",\n        mustard: \"‡§∏‡§∞‡§∏‡•ã‡§Ç\",\n        sunflower: \"‡§∏‡•Ç‡§∞‡§ú‡§Æ‡•Å‡§ñ‡•Ä\",\n        \n        // Placeholders\n        enter_name: \"‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç\",\n        enter_quantity: \"‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç\",\n        enter_price: \"‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç\",\n        search_map: \"‡§ñ‡•á‡§§, ‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞ ‡§Ø‡§æ ‡§ó‡•ã‡§¶‡§æ‡§Æ ‡§ñ‡•ã‡§ú‡•á‡§Ç...\",\n        chat_placeholder: \"‡§ï‡•Ä‡§Æ‡§§‡•ã‡§Ç, ‡§Æ‡•å‡§∏‡§Æ, ‡§ï‡•Ä‡§ü‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç...\",\n        \n        // Dynamic Content\n        price_forecast: \"7-‡§¶‡§ø‡§® ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®\",\n        date: \"‡§§‡§æ‡§∞‡•Ä‡§ñ\",\n        weather: \"‡§Æ‡•å‡§∏‡§Æ\",\n        pest_risk: \"‡§ï‡•Ä‡§ü ‡§ú‡•ã‡§ñ‡§ø‡§Æ\",\n        sowing_time: \"‡§¨‡•Å‡§µ‡§æ‡§à ‡§ï‡§æ ‡§∏‡§Æ‡§Ø\",\n        harvest_time: \"‡§ï‡§ü‡§æ‡§à ‡§ï‡§æ ‡§∏‡§Æ‡§Ø\",\n        tip: \"‡§∏‡•Å‡§ù‡§æ‡§µ\",\n        success: \"‡§∏‡§´‡§≤!\",\n        block_hash: \"‡§¨‡•ç‡§≤‡•â‡§ï ‡§π‡•à‡§∂\",\n        congratulations: \"‡§¨‡§ß‡§æ‡§à ‡§π‡•ã! ‡§Ü‡§™‡§ï‡•á ‡§¨‡•à‡§ú:\",\n        transaction_success: \"‡§≤‡•á‡§®‡§¶‡•á‡§® ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¨‡•ç‡§≤‡•â‡§ï‡§ö‡•á‡§® ‡§™‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ!\",\n        fill_all_fields: \"‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§≠‡•Ä ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§≠‡§∞‡•á‡§Ç\",\n        listening: \"‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...\",\n        heard: \"‡§∏‡•Å‡§®‡§æ ‡§ó‡§Ø‡§æ\",\n        \n        // Advisory Messages\n        moderate_rainfall: \"‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§µ‡§∞‡•ç‡§∑‡§æ ‡§ï‡•Ä ‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶ ‡§π‡•à‡•§ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ö‡•ç‡§õ‡§æ‡•§\",\n        low_pest_risk: \"‡§´‡§≤‡•Ä ‡§õ‡•á‡§¶‡§ï ‡§ï‡§æ ‡§ï‡§Æ ‡§ú‡•ã‡§ñ‡§ø‡§Æ‡•§ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡•á‡§Ç‡•§\",\n        best_sowing: \"‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ: ‡§ú‡•Ç‡§®-‡§ú‡•Å‡§≤‡§æ‡§à (‡§ñ‡§∞‡•Ä‡§´ ‡§∏‡•Ä‡§ú‡§®)\",\n        harvest_oct_nov: \"‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞-‡§®‡§µ‡§Ç‡§¨‡§∞\",\n        drainage_tip: \"‡§ú‡§≤‡§≠‡§∞‡§æ‡§µ ‡§ï‡•ã ‡§∞‡•ã‡§ï‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§ö‡§ø‡§§ ‡§ú‡§≤ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç\"\n    },\n    te: {\n        // Headers and Labels\n        farmer_dashboard: \"‡∞∞‡±à‡∞§‡±Å ‡∞°‡∞æ‡∞∑‡±ç‚Äå‡∞¨‡±ã‡∞∞‡±ç‡∞°‡±ç\",\n        ai_price_predictor: \"AI ‡∞ß‡∞∞ ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ\",\n        voice_control: \"‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç ‡∞®‡∞ø‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞£\",\n        select_crop: \"‡∞™‡∞Ç‡∞ü ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø\",\n        predict_prices: \"‡∞ß‡∞∞‡∞≤‡∞®‡±Å ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞µ‡±á‡∞Ø‡∞Ç‡∞°‡∞ø\",\n        crop_advisory: \"‡∞™‡∞Ç‡∞ü ‡∞∏‡∞≤‡∞π‡∞æ\",\n        select_crop_info: \"‡∞™‡∞Ç‡∞ü‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡∞≤‡∞π‡∞æ ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞ö‡±Ç‡∞°‡∞ü‡∞æ‡∞®‡∞ø‡∞ï‡∞ø '‡∞ß‡∞∞‡∞≤‡∞®‡±Å ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞µ‡±á‡∞Ø‡∞Ç‡∞°‡∞ø' ‡∞ï‡±ç‡∞≤‡∞ø‡∞ï‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø\",\n        sell_crop: \"‡∞Æ‡±Ä ‡∞™‡∞Ç‡∞ü‡∞®‡±Å ‡∞µ‡∞ø‡∞ï‡±ç‡∞∞‡∞Ø‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø\",\n        your_name: \"‡∞Æ‡±Ä ‡∞™‡±á‡∞∞‡±Å\",\n        crop_type: \"‡∞™‡∞Ç‡∞ü ‡∞∞‡∞ï‡∞Ç\",\n        quantity: \"‡∞™‡∞∞‡∞ø‡∞Æ‡∞æ‡∞£‡∞Ç (‡∞ï‡∞ø‡∞≤‡±ã‡∞≤‡±Å)\",\n        price: \"‡∞ß‡∞∞ (‚Çπ/‡∞ï‡±ç‡∞µ‡∞ø‡∞Ç‡∞ü‡∞≤‡±ç)\",\n        sell_crop_btn: \"‡∞™‡∞Ç‡∞ü‡∞®‡±Å ‡∞µ‡∞ø‡∞ï‡±ç‡∞∞‡∞Ø‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø\",\n        your_badges: \"‡∞Æ‡±Ä ‡∞¨‡±ç‡∞Ø‡∞æ‡∞°‡±ç‡∞ú‡±Ä‡∞≤‡±Å\",\n        earn_badges: \"‡∞¨‡±ç‡∞Ø‡∞æ‡∞°‡±ç‡∞ú‡±Ä‡∞≤‡±Å ‡∞∏‡∞Ç‡∞™‡∞æ‡∞¶‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞≤‡∞æ‡∞µ‡∞æ‡∞¶‡±á‡∞µ‡±Ä‡∞≤‡±Å ‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø!\",\n        marketplace_map: \"‡∞Æ‡∞æ‡∞∞‡±ç‡∞ï‡±Ü‡∞ü‡±ç ‡∞Æ‡±ç‡∞Ø‡∞æ‡∞™‡±ç - ‡∞∞‡±à‡∞§‡±Å‡∞≤‡±Å, ‡∞ï‡±ä‡∞®‡±Å‡∞ó‡±ã‡∞≤‡±Å‡∞¶‡∞æ‡∞∞‡±Å‡∞≤‡±Å & ‡∞ó‡∞ø‡∞°‡±ç‡∞°‡∞Ç‡∞ó‡±Å‡∞≤‡∞®‡±Å ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞Ç‡∞°‡∞ø\",\n        farmers: \"üü¢ ‡∞∞‡±à‡∞§‡±Å‡∞≤‡±Å\",\n        buyers: \"üîµ ‡∞ï‡±ä‡∞®‡±Å‡∞ó‡±ã‡∞≤‡±Å‡∞¶‡∞æ‡∞∞‡±Å‡∞≤‡±Å\",\n        warehouses: \"üü† ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ï‡±Ü‡∞ü‡±ç‡∞≤‡±Å/‡∞ó‡∞ø‡∞°‡±ç‡∞°‡∞Ç‡∞ó‡±Å‡∞≤‡±Å\",\n        ai_assistant: \"AI ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡±Å\",\n        ai_greeting: \"‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç! ‡∞®‡±á‡∞®‡±Å ‡∞®‡±Ç‡∞®‡±Ü ‡∞ó‡∞ø‡∞Ç‡∞ú‡∞≤ ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø‡∞Ç, ‡∞ß‡∞∞ ‡∞®‡∞ø‡∞∞‡±ç‡∞£‡∞Ø‡∞Ç, ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Æ‡∞∞‡∞ø‡∞®‡±ç‡∞®‡∞ø‡∞Ç‡∞ü‡∞ø‡∞≤‡±ã ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å. ‡∞è‡∞¶‡±à‡∞®‡∞æ ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø!\",\n        download_report: \"‡∞®‡∞æ ‡∞®‡∞ø‡∞µ‡±á‡∞¶‡∞ø‡∞ï‡∞®‡±Å ‡∞°‡±å‡∞®‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø (PDF)\",\n        \n        // Crops\n        soybean: \"‡∞∏‡±ã‡∞Ø‡∞æ‡∞¨‡±Ä‡∞®‡±ç\",\n        groundnut: \"‡∞µ‡±á‡∞∞‡±Å‡∞∂‡∞®‡∞ó\",\n        mustard: \"‡∞Ü‡∞µ‡∞æ‡∞≤‡±Å\",\n        sunflower: \"‡∞™‡±ä‡∞¶‡±ç‡∞¶‡±Å‡∞§‡∞ø‡∞∞‡±Å‡∞ó‡±Å\",\n        \n        // Placeholders\n        enter_name: \"‡∞Æ‡±Ä ‡∞™‡±á‡∞∞‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø\",\n        enter_quantity: \"‡∞™‡∞∞‡∞ø‡∞Æ‡∞æ‡∞£‡∞Ç ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø\",\n        enter_price: \"‡∞ß‡∞∞ ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø\",\n        search_map: \"‡∞™‡±ä‡∞≤‡∞æ‡∞≤‡±Å, ‡∞ï‡±ä‡∞®‡±Å‡∞ó‡±ã‡∞≤‡±Å‡∞¶‡∞æ‡∞∞‡±Å‡∞≤‡±Å ‡∞≤‡±á‡∞¶‡∞æ ‡∞ó‡∞ø‡∞°‡±ç‡∞°‡∞Ç‡∞ó‡±Å‡∞≤ ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞∂‡±ã‡∞ß‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø...\",\n        chat_placeholder: \"‡∞ß‡∞∞‡∞≤‡±Å, ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç, ‡∞§‡±Ü‡∞ó‡±Å‡∞≥‡±ç‡∞≥ ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø...\",\n        \n        // Dynamic Content\n        price_forecast: \"7-‡∞∞‡±ã‡∞ú‡±Å‡∞≤ ‡∞ß‡∞∞ ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ\",\n        date: \"‡∞§‡±á‡∞¶‡±Ä\",\n        weather: \"‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç\",\n        pest_risk: \"‡∞§‡±Ü‡∞ó‡±Å‡∞≥‡±ç‡∞≤ ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞¶‡∞Ç\",\n        sowing_time: \"‡∞µ‡∞ø‡∞§‡±ç‡∞§‡∞® ‡∞∏‡∞Æ‡∞Ø‡∞Ç\",\n        harvest_time: \"‡∞ï‡±ã‡∞§ ‡∞∏‡∞Æ‡∞Ø‡∞Ç\",\n        tip: \"‡∞∏‡±Ç‡∞ö‡∞®\",\n        success: \"‡∞µ‡∞ø‡∞ú‡∞Ø‡∞Ç!\",\n        block_hash: \"‡∞¨‡±ç‡∞≤‡∞æ‡∞ï‡±ç ‡∞π‡±ç‡∞Ø‡∞æ‡∞∑‡±ç\",\n        congratulations: \"‡∞Ö‡∞≠‡∞ø‡∞®‡∞Ç‡∞¶‡∞®‡∞≤‡±Å! ‡∞Æ‡±Ä ‡∞¨‡±ç‡∞Ø‡∞æ‡∞°‡±ç‡∞ú‡±Ä‡∞≤‡±Å:\",\n        transaction_success: \"‡∞≤‡∞æ‡∞µ‡∞æ‡∞¶‡±á‡∞µ‡±Ä ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞¨‡±ç‡∞≤‡∞æ‡∞ï‡±ç‚Äå‡∞ö‡±Ü‡∞Ø‡∞ø‡∞®‡±ç‚Äå‡∞≤‡±ã ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø!\",\n        fill_all_fields: \"‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞´‡±Ä‡∞≤‡±ç‡∞°‡±ç‚Äå‡∞≤‡∞®‡±Å ‡∞™‡±Ç‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø\",\n        listening: \"‡∞µ‡∞ø‡∞Ç‡∞ü‡±ã‡∞Ç‡∞¶‡∞ø...\",\n        heard: \"‡∞µ‡∞ø‡∞®‡±ç‡∞®‡∞¶‡∞ø\",\n        \n        // Advisory Messages\n        moderate_rainfall: \"‡∞Æ‡∞ø‡∞§‡∞Æ‡±à‡∞® ‡∞µ‡∞∞‡±ç‡∞∑‡∞™‡∞æ‡∞§‡∞Ç ‡∞ä‡∞π‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞™‡±Ü‡∞∞‡±Å‡∞ó‡±Å‡∞¶‡∞≤‡∞ï‡±Å ‡∞Æ‡∞Ç‡∞ö‡∞ø‡∞¶‡∞ø.\",\n        low_pest_risk: \"‡∞™‡∞æ‡∞°‡±ç ‡∞¨‡±ã‡∞∞‡∞∞‡±ç ‡∞Ø‡±ä‡∞ï‡±ç‡∞ï ‡∞§‡∞ï‡±ç‡∞ï‡±Å‡∞µ ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞¶‡∞Ç. ‡∞ï‡±ç‡∞∞‡∞Æ‡∞Ç ‡∞§‡∞™‡±ç‡∞™‡∞ï‡±Å‡∞Ç‡∞°‡∞æ ‡∞™‡∞∞‡±ç‡∞Ø‡∞µ‡±á‡∞ï‡±ç‡∞∑‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.\",\n        best_sowing: \"‡∞â‡∞§‡±ç‡∞§‡∞Æ‡∞Æ‡±à‡∞®‡∞¶‡∞ø: ‡∞ú‡±Ç‡∞®‡±ç-‡∞ú‡±Ç‡∞≤‡±à (‡∞ñ‡∞∞‡±Ä‡∞´‡±ç ‡∞∏‡±Ä‡∞ú‡∞®‡±ç)\",\n        harvest_oct_nov: \"‡∞Ö‡∞ï‡±ç‡∞ü‡±ã‡∞¨‡∞∞‡±ç-‡∞®‡∞µ‡∞Ç‡∞¨‡∞∞‡±ç\",\n        drainage_tip: \"‡∞®‡±Ä‡∞ü‡∞ø ‡∞Ü‡∞ó‡±Å‡∞¶‡∞≤‡∞®‡±Å ‡∞®‡∞ø‡∞∞‡±ã‡∞ß‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞∏‡∞∞‡±à‡∞® ‡∞®‡±Ä‡∞ü‡∞ø ‡∞®‡∞ø‡∞∞‡±ç‡∞ó‡∞Æ‡∞®‡∞Ç ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø\"\n    },\n    ta: {\n        // Headers and Labels\n        farmer_dashboard: \"‡Æµ‡Æø‡Æµ‡Æö‡Ææ‡ÆØ‡Æø ‡Æü‡Ææ‡Æ∑‡Øç‡Æ™‡Øã‡Æ∞‡Øç‡Æü‡ØÅ\",\n        ai_price_predictor: \"AI ‡Æµ‡Æø‡Æ≤‡Øà ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡Æ±‡Æø‡Æµ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ\",\n        voice_control: \"‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç ‡Æï‡Æü‡Øç‡Æü‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡Æü‡ØÅ\",\n        select_crop: \"‡Æ™‡ÆØ‡Æø‡Æ∞‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç\",\n        predict_prices: \"‡Æµ‡Æø‡Æ≤‡Øà‡Æï‡Æ≥‡Øà ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡Æ±‡Æø‡Æµ‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç\",\n        crop_advisory: \"‡Æ™‡ÆØ‡Æø‡Æ∞‡Øç ‡ÆÜ‡Æ≤‡Øã‡Æö‡Æ©‡Øà\",\n        select_crop_info: \"‡Æ™‡ÆØ‡Æø‡Æ∞‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ ‡ÆÜ‡Æ≤‡Øã‡Æö‡Æ©‡Øà ‡Æ§‡Æï‡Æµ‡Æ≤‡Øà‡Æ™‡Øç ‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï '‡Æµ‡Æø‡Æ≤‡Øà‡Æï‡Æ≥‡Øà ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡Æ±‡Æø‡Æµ‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç' ‡Æé‡Æ©‡Øç‡Æ™‡Æ§‡Øà‡Æï‡Øç ‡Æï‡Æø‡Æ≥‡Æø‡Æï‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç\",\n        sell_crop: \"‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡ÆØ‡Æø‡Æ∞‡Øà ‡Æµ‡Æø‡Æ±‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç\",\n        your_name: \"‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç\",\n        crop_type: \"‡Æ™‡ÆØ‡Æø‡Æ∞‡Øç ‡Æµ‡Æï‡Øà\",\n        quantity: \"‡ÆÖ‡Æ≥‡Æµ‡ØÅ (‡Æï‡Æø‡Æ≤‡Øã)\",\n        price: \"‡Æµ‡Æø‡Æ≤‡Øà (‚Çπ/‡Æï‡ØÅ‡Æµ‡Æø‡Æ£‡Øç‡Æü‡Æ≤‡Øç)\",\n        sell_crop_btn: \"‡Æ™‡ÆØ‡Æø‡Æ∞‡Øà ‡Æµ‡Æø‡Æ±‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç\",\n        your_badges: \"‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Øá‡Æü‡Øç‡Æú‡Øç‡Æï‡Æ≥‡Øç\",\n        earn_badges: \"‡Æ™‡Øá‡Æü‡Øç‡Æú‡Øç‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡ØÜ‡Æ± ‡Æ™‡Æ∞‡Æø‡Æµ‡Æ∞‡Øç‡Æ§‡Øç‡Æ§‡Æ©‡Øà‡Æï‡Æ≥‡Øà ‡ÆÆ‡ØÅ‡Æü‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç!\",\n        marketplace_map: \"‡Æö‡Æ®‡Øç‡Æ§‡Øà ‡Æµ‡Æ∞‡Øà‡Æ™‡Æü‡ÆÆ‡Øç - ‡Æµ‡Æø‡Æµ‡Æö‡Ææ‡ÆØ‡Æø‡Æï‡Æ≥‡Øç, ‡Æµ‡Ææ‡Æô‡Øç‡Æï‡ØÅ‡Æ™‡Æµ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç & ‡Æï‡Æø‡Æü‡Æô‡Øç‡Æï‡ØÅ‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡Æ±‡Æø‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç\",\n        farmers: \"üü¢ ‡Æµ‡Æø‡Æµ‡Æö‡Ææ‡ÆØ‡Æø‡Æï‡Æ≥‡Øç\",\n        buyers: \"üîµ ‡Æµ‡Ææ‡Æô‡Øç‡Æï‡ØÅ‡Æ™‡Æµ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç\",\n        warehouses: \"üü† ‡Æö‡Æ®‡Øç‡Æ§‡Øà‡Æï‡Æ≥‡Øç/‡Æï‡Æø‡Æü‡Æô‡Øç‡Æï‡ØÅ‡Æï‡Æ≥‡Øç\",\n        ai_assistant: \"AI ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç\",\n        ai_greeting: \"‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç! ‡Æ®‡Ææ‡Æ©‡Øç ‡Æé‡Æ£‡Øç‡Æ£‡ØÜ‡ÆØ‡Øç ‡Æµ‡Æø‡Æ§‡Øà ‡Æµ‡Æø‡Æµ‡Æö‡Ææ‡ÆØ‡ÆÆ‡Øç, ‡Æµ‡Æø‡Æ≤‡Øà ‡Æ®‡Æø‡Æ∞‡Øç‡Æ£‡ÆØ‡ÆÆ‡Øç, ‡Æµ‡Ææ‡Æ©‡Æø‡Æ≤‡Øà ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Æ≤‡Æµ‡Æ±‡Øç‡Æ±‡Æø‡Æ≤‡Øç ‡Æâ‡Æ§‡Æµ ‡Æá‡Æô‡Øç‡Æï‡Øá ‡Æá‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç. ‡Æé‡Æ§‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç!\",\n        download_report: \"‡Æé‡Æ©‡Æ§‡ØÅ ‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà‡ÆØ‡Øà‡Æ™‡Øç ‡Æ™‡Æ§‡Æø‡Æµ‡Æø‡Æ±‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç (PDF)\",\n        \n        // Crops\n        soybean: \"‡Æö‡Øã‡ÆØ‡Ææ‡Æ™‡ØÄ‡Æ©‡Øç\",\n        groundnut: \"‡Æµ‡Øá‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æü‡Æ≤‡Øà\",\n        mustard: \"‡Æï‡Æü‡ØÅ‡Æï‡ØÅ\",\n        sunflower: \"‡Æö‡ØÇ‡Æ∞‡Æø‡ÆØ‡Æï‡Ææ‡Æ®‡Øç‡Æ§‡Æø\",\n        \n        // Placeholders\n        enter_name: \"‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç\",\n        enter_quantity: \"‡ÆÖ‡Æ≥‡Æµ‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç\",\n        enter_price: \"‡Æµ‡Æø‡Æ≤‡Øà‡ÆØ‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç\",\n        search_map: \"‡Æ™‡Æ£‡Øç‡Æ£‡Øà‡Æï‡Æ≥‡Øç, ‡Æµ‡Ææ‡Æô‡Øç‡Æï‡ØÅ‡Æ™‡Æµ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æï‡Æø‡Æü‡Æô‡Øç‡Æï‡ØÅ‡Æï‡Æ≥‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æü‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç...\",\n        chat_placeholder: \"‡Æµ‡Æø‡Æ≤‡Øà‡Æï‡Æ≥‡Øç, ‡Æµ‡Ææ‡Æ©‡Æø‡Æ≤‡Øà, ‡Æ™‡ØÇ‡Æö‡Øç‡Æö‡Æø‡Æï‡Æ≥‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç...\",\n        \n        // Dynamic Content\n        price_forecast: \"7-‡Æ®‡Ææ‡Æ≥‡Øç ‡Æµ‡Æø‡Æ≤‡Øà ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡Æ±‡Æø‡Æµ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ\",\n        date: \"‡Æ§‡Øá‡Æ§‡Æø\",\n        weather: \"‡Æµ‡Ææ‡Æ©‡Æø‡Æ≤‡Øà\",\n        pest_risk: \"‡Æ™‡ØÇ‡Æö‡Øç‡Æö‡Æø ‡ÆÖ‡Æ™‡Ææ‡ÆØ‡ÆÆ‡Øç\",\n        sowing_time: \"‡Æµ‡Æø‡Æ§‡Øà‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç\",\n        harvest_time: \"‡ÆÖ‡Æ±‡ØÅ‡Æµ‡Æü‡Øà ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç\",\n        tip: \"‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡ØÅ\",\n        success: \"‡Æµ‡ØÜ‡Æ±‡Øç‡Æ±‡Æø!\",\n        block_hash: \"‡Æ™‡Æø‡Æ≥‡Ææ‡Æï‡Øç ‡Æπ‡Ææ‡Æ∑‡Øç\",\n        congratulations: \"‡Æµ‡Ææ‡Æ¥‡Øç‡Æ§‡Øç‡Æ§‡ØÅ‡Æï‡Øç‡Æï‡Æ≥‡Øç! ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Øá‡Æü‡Øç‡Æú‡Øç‡Æï‡Æ≥‡Øç:\",\n        transaction_success: \"‡Æ™‡Æ∞‡Æø‡Æµ‡Æ∞‡Øç‡Æ§‡Øç‡Æ§‡Æ©‡Øà ‡Æµ‡ØÜ‡Æ±‡Øç‡Æ±‡Æø‡Æï‡Æ∞‡ÆÆ‡Ææ‡Æï blockchain ‡Æá‡Æ≤‡Øç ‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ!\",\n        fill_all_fields: \"‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡ÆÖ‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡ØÅ ‡Æ™‡ØÅ‡Æ≤‡Æô‡Øç‡Æï‡Æ≥‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æ®‡Æø‡Æ∞‡Æ™‡Øç‡Æ™‡Æµ‡ØÅ‡ÆÆ‡Øç\",\n        listening: \"‡Æï‡Øá‡Æü‡Øç‡Æï‡Æø‡Æ±‡Æ§‡ØÅ...\",\n        heard: \"‡Æï‡Øá‡Æü‡Øç‡Æü‡Æ§‡ØÅ\",\n        \n        // Advisory Messages\n        moderate_rainfall: \"‡ÆÆ‡Æø‡Æ§‡ÆÆ‡Ææ‡Æ© ‡ÆÆ‡Æ¥‡Øà‡Æ™‡Øç‡Æ™‡Øä‡Æ¥‡Æø‡Æµ‡ØÅ ‡Æé‡Æ§‡Æø‡Æ∞‡Øç‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æï‡Æø‡Æ±‡Æ§‡ØÅ. ‡Æµ‡Æ≥‡Æ∞‡Øç‡Æö‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡ØÅ ‡Æ®‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ.\",\n        low_pest_risk: \"‡Æï‡Ææ‡ÆØ‡Øç ‡Æ§‡ØÅ‡Æ≥‡Øà‡Æ™‡Øç‡Æ™‡Ææ‡Æ©‡Æø‡Æ©‡Øç ‡Æï‡ØÅ‡Æ±‡Øà‡Æ®‡Øç‡Æ§ ‡ÆÜ‡Æ™‡Æ§‡Øç‡Æ§‡ØÅ. ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÅ ‡Æï‡Æ£‡Øç‡Æï‡Ææ‡Æ£‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.\",\n        best_sowing: \"‡Æö‡Æø‡Æ±‡Æ®‡Øç‡Æ§‡Æ§‡ØÅ: ‡Æú‡ØÇ‡Æ©‡Øç-‡Æú‡ØÇ‡Æ≤‡Øà (‡Æï‡Æ∞‡ØÄ‡ÆÉ‡Æ™‡Øç ‡Æ™‡Æ∞‡ØÅ‡Æµ‡ÆÆ‡Øç)\",\n        harvest_oct_nov: \"‡ÆÖ‡Æï‡Øç‡Æü‡Øã‡Æ™‡Æ∞‡Øç-‡Æ®‡Æµ‡ÆÆ‡Øç‡Æ™‡Æ∞‡Øç\",\n        drainage_tip: \"‡Æ®‡ØÄ‡Æ∞‡Øç ‡Æ§‡Øá‡Æô‡Øç‡Æï‡ØÅ‡Æµ‡Æ§‡Øà‡Æ§‡Øç ‡Æ§‡Æü‡ØÅ‡Æï‡Øç‡Æï ‡Æö‡Æ∞‡Æø‡ÆØ‡Ææ‡Æ© ‡Æµ‡Æü‡Æø‡Æï‡Ææ‡Æ≤‡Øç ‡Æâ‡Æ±‡ØÅ‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç\"\n    }\n};\n\nfunction getTranslation(key, lang = 'en') {\n    return translations[lang] && translations[lang][key] ? translations[lang][key] : translations['en'][key] || key;\n}\n","size_bytes":16569},"app.py":{"content":"from flask import Flask, render_template, request, jsonify, send_file, session\nfrom blockchain import Blockchain\nfrom ai_predictor import predict_price, generate_price_chart, get_crop_advisory, generate_ai_insights, get_ai_chat_response\nfrom pdf_generator import generate_transaction_report, generate_farmer_report\nimport random\nimport os\n\napp = Flask(__name__)\napp.secret_key = os.environ.get('SESSION_SECRET', 'oilseed-value-chain-secret-key-2025')\n\nblockchain = Blockchain()\n\nfarmer_data = {\n    \"badges\": [],\n    \"total_sales\": 0,\n    \"transactions\": []\n}\n\nwarehouse_data = {\n    \"capacity\": 10000,\n    \"current_stock\": 0,\n    \"crops\": {}\n}\n\ndef calculate_badges(price, crop_type, quantity):\n    badges = []\n    base_price = {\"soybean\": 4500, \"groundnut\": 5200, \"mustard\": 6000, \"sunflower\": 5800}\n    \n    if price >= base_price.get(crop_type, 5000) * 1.1:\n        badges.append(\"Smart Seller üí∞\")\n    \n    if quantity >= 1000:\n        badges.append(\"High Volume Producer üåæ\")\n    \n    if len(farmer_data[\"transactions\"]) >= 5:\n        badges.append(\"Loyal Member ‚≠ê\")\n    \n    return badges\n\n@app.route('/')\ndef home():\n    return render_template('index.html')\n\n@app.route('/farmer')\ndef farmer_dashboard():\n    return render_template('farmer.html')\n\n@app.route('/fpo')\ndef fpo_dashboard():\n    transactions = blockchain.get_all_transactions()\n    stats = blockchain.get_statistics()\n    return render_template('fpo.html', transactions=transactions, stats=stats, warehouse=warehouse_data)\n\n@app.route('/admin')\ndef admin_dashboard():\n    stats = blockchain.get_statistics()\n    insights = generate_ai_insights(stats)\n    transactions = blockchain.get_all_transactions()\n    return render_template('admin.html', stats=stats, insights=insights, transactions=transactions)\n\n@app.route('/api/predict-price', methods=['POST'])\ndef api_predict_price():\n    data = request.json\n    crop_type = data.get('crop_type', 'soybean')\n    \n    predictions = predict_price(crop_type)\n    chart_image = generate_price_chart(crop_type, predictions)\n    advisory = get_crop_advisory(crop_type)\n    \n    return jsonify({\n        'predictions': predictions,\n        'chart': chart_image,\n        'advisory': advisory\n    })\n\n@app.route('/api/sell-crop', methods=['POST'])\ndef api_sell_crop():\n    data = request.json\n    farmer_name = data.get('farmer_name', 'Anonymous Farmer')\n    crop_type = data.get('crop_type', 'soybean')\n    quantity = float(data.get('quantity', 100))\n    price = float(data.get('price', 5000))\n    \n    block = blockchain.add_transaction(farmer_name, crop_type, quantity, price)\n    \n    badges = calculate_badges(price, crop_type, quantity)\n    farmer_data[\"badges\"].extend(badges)\n    farmer_data[\"badges\"] = list(set(farmer_data[\"badges\"]))\n    farmer_data[\"total_sales\"] += 1\n    farmer_data[\"transactions\"].append({\n        \"crop\": crop_type,\n        \"quantity\": quantity,\n        \"price\": price\n    })\n    \n    if crop_type in warehouse_data[\"crops\"]:\n        warehouse_data[\"crops\"][crop_type] += quantity\n    else:\n        warehouse_data[\"crops\"][crop_type] = quantity\n    warehouse_data[\"current_stock\"] += quantity\n    \n    return jsonify({\n        'success': True,\n        'block_hash': block.hash,\n        'badges': farmer_data[\"badges\"],\n        'message': 'Transaction recorded on blockchain successfully!'\n    })\n\n@app.route('/api/chat', methods=['POST'])\ndef api_chat():\n    data = request.json\n    user_message = data.get('message', '')\n    \n    response = get_ai_chat_response(user_message)\n    \n    return jsonify({\n        'response': response\n    })\n\n@app.route('/api/blockchain-status')\ndef api_blockchain_status():\n    return jsonify({\n        'is_valid': blockchain.is_chain_valid(),\n        'total_blocks': len(blockchain.chain),\n        'latest_hash': blockchain.get_latest_block().hash\n    })\n\n@app.route('/download-report')\ndef download_report():\n    report_type = request.args.get('type', 'transactions')\n    \n    if report_type == 'farmer' and farmer_data[\"transactions\"]:\n        last_transaction = farmer_data[\"transactions\"][-1]\n        predictions = predict_price(last_transaction[\"crop\"])\n        pdf_buffer = generate_farmer_report(\n            \"Farmer User\",\n            last_transaction[\"crop\"],\n            last_transaction[\"quantity\"],\n            last_transaction[\"price\"],\n            predictions,\n            farmer_data[\"badges\"]\n        )\n        return send_file(pdf_buffer, as_attachment=True, download_name='farmer_report.pdf', mimetype='application/pdf')\n    else:\n        pdf_buffer = generate_transaction_report(blockchain)\n        return send_file(pdf_buffer, as_attachment=True, download_name='blockchain_report.pdf', mimetype='application/pdf')\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":4793},"README.md":{"content":"# üåæ AI-Enabled Value Chain Platform for Oilseed Self-Reliance\n\nA comprehensive web-based prototype platform designed to enhance India's oilseed self-reliance by connecting farmers, FPOs/processors, and policymakers through AI-powered analytics and blockchain-based traceability.\n\n## üéØ Project Goal\n\nCreate a visually appealing, interactive, and informative prototype that demonstrates how AI and Blockchain can enhance India's oilseed self-reliance through smarter production, logistics, and policy decisions.\n\n## ‚ú® Key Features\n\n### üöú Farmer Dashboard\n- **AI Price Predictor**: 7-day price forecasting with interactive charts\n- **Crop Advisory**: Weather alerts, pest warnings, sowing/harvest recommendations\n- **Smart Selling**: Record crop sales on blockchain\n- **Gamified Badges**: Earn achievements for smart decisions\n  - üí∞ Smart Seller (selling 10% above base price)\n  - üåæ High Volume Producer (1000+ kg sold)\n  - ‚≠ê Loyal Member (5+ transactions)\n- **AI Assistant**: Real-time chatbot for farming advice\n- **PDF Reports**: Download personalized performance reports\n\n### üè≠ FPO/Processor Dashboard\n- **Blockchain Transaction Log**: Complete transaction history with verification\n- **Warehouse Management**: Capacity monitoring and utilization\n- **Procurement Analytics**: Chart.js visualizations\n  - Crops by type\n  - Warehouse capacity pie chart\n- **Forward Contracts**: Manage procurement agreements\n- **PDF Reports**: Export comprehensive transaction summaries\n\n### üìä Policymaker/Admin Dashboard\n- **National Analytics**: Transaction volume, total value, and statistics\n- **AI-Generated Insights**: Market predictions and policy recommendations\n- **Price Trend Analysis**: Multi-crop comparative charts\n- **Logistics Visualization**: Regional warehouse distribution map\n- **Volume Tracking**: Daily trading volume analytics\n- **Policy Recommendations**: Short-term and long-term strategies\n\n## üõ†Ô∏è Technology Stack\n\n- **Backend**: Flask (Python 3.11)\n- **Frontend**: HTML5, CSS3, JavaScript\n- **Visualizations**: Chart.js, Matplotlib\n- **PDF Generation**: ReportLab\n- **Blockchain**: Custom Python implementation with SHA-256\n- **UI Framework**: Custom responsive CSS with gradient themes\n\n## üé® Design Theme\n\n- **Color Palette**: Green (#2ecc71, #27ae60), gradient backgrounds\n- **Style**: Modern, nature-themed, eco-friendly\n- **Icons**: Font Awesome\n- **Responsive**: Mobile and desktop optimized\n\n## üå± Supported Crops\n\n1. **Soybean** - Base price: ‚Çπ4,500/quintal\n2. **Groundnut** - Base price: ‚Çπ5,200/quintal\n3. **Mustard** - Base price: ‚Çπ6,000/quintal\n4. **Sunflower** - Base price: ‚Çπ5,800/quintal\n\n## üöÄ Getting Started\n\n### Prerequisites\n- Python 3.11+\n- Flask and dependencies (automatically installed)\n\n### Running the Application\nThe application is already configured and running on port 5000. Simply access it through your browser.\n\n### Navigation\n- **Home**: `/` - Choose your role (Farmer, FPO, Policymaker)\n- **Farmer Dashboard**: `/farmer`\n- **FPO Dashboard**: `/fpo`\n- **Admin Dashboard**: `/admin`\n\n## üì° API Endpoints\n\n- `POST /api/predict-price` - Get AI price predictions\n- `POST /api/sell-crop` - Record crop sale on blockchain\n- `POST /api/chat` - AI chatbot responses\n- `GET /api/blockchain-status` - Blockchain validation\n- `GET /download-report` - Generate PDF reports\n\n## üí° How to Use\n\n### For Farmers:\n1. Navigate to Farmer Dashboard\n2. Select crop type and view AI price predictions\n3. Review crop advisory (weather, pests, tips)\n4. Enter details to sell your crop\n5. Earn badges for smart selling\n6. Chat with AI Assistant for farming advice\n7. Download your performance report\n\n### For FPOs:\n1. Navigate to FPO Dashboard\n2. View all blockchain transactions\n3. Monitor warehouse capacity\n4. Analyze procurement by crop type\n5. Manage forward contracts\n6. Download transaction reports\n\n### For Policymakers:\n1. Navigate to Admin Dashboard\n2. View national-level statistics\n3. Review AI-generated insights\n4. Monitor price trends\n5. Analyze logistics distribution\n6. Get policy recommendations\n7. Download national reports\n\n## üîê Blockchain Features\n\n- SHA-256 cryptographic hashing\n- Immutable transaction records\n- Chain integrity verification\n- Complete audit trail\n- Transparent and secure\n\n## ü§ñ AI Capabilities\n\n- Mock ML-based price prediction\n- 7-day forecasting with volatility modeling\n- Crop-specific advisory generation\n- Market insights and recommendations\n- Intelligent chatbot responses\n\n## üì± Responsive Design\n\nThe platform is fully responsive and works seamlessly on:\n- Desktop computers\n- Tablets\n- Mobile devices\n\n## üìà Future Enhancements\n\n- Real weather API integration\n- Live commodity price feeds\n- PostgreSQL database for persistence\n- Multi-user authentication\n- Actual ML models (LSTM/Prophet)\n- Real-time price alerts\n- Mobile app development\n- Multi-language support (Hindi, regional languages)\n\n## üáÆüá≥ Impact\n\nThis platform aims to reduce India's edible oil imports from the current 55-60% by:\n- Optimizing farmer pricing decisions\n- Improving supply chain transparency\n- Enabling data-driven policy making\n- Connecting all stakeholders efficiently\n\n## üìù Note\n\nThis is a **prototype demonstration**. All AI predictions and blockchain simulations use mock data for demonstration purposes. The platform showcases the potential of integrating AI and blockchain technology in agricultural value chains.\n\n## üìÑ License\n\nThis project is created for educational and demonstration purposes.\n\n---\n\n**Created with üå± for India's Oilseed Self-Reliance Initiative**\n","size_bytes":5588},"ai_predictor.py":{"content":"import random\nfrom datetime import datetime, timedelta\nimport matplotlib\nmatplotlib.use('Agg')\nimport matplotlib.pyplot as plt\nimport io\nimport base64\n\nCROP_BASE_PRICES = {\n    \"soybean\": 4500,\n    \"groundnut\": 5200,\n    \"mustard\": 6000,\n    \"sunflower\": 5800\n}\n\ndef predict_price(crop_type, days=7):\n    base_price = CROP_BASE_PRICES.get(crop_type.lower(), 5000)\n    \n    predictions = []\n    current_price = base_price\n    \n    for i in range(days):\n        date = datetime.now() + timedelta(days=i)\n        \n        volatility = random.uniform(-0.03, 0.05)\n        seasonal_factor = 0.02 * (i % 3 - 1)\n        trend = 0.01\n        \n        price_change = current_price * (volatility + seasonal_factor + trend)\n        current_price = max(current_price + price_change, base_price * 0.8)\n        \n        predictions.append({\n            \"date\": date.strftime(\"%Y-%m-%d\"),\n            \"price\": round(current_price, 2)\n        })\n    \n    return predictions\n\ndef generate_price_chart(crop_type, predictions):\n    dates = [p[\"date\"] for p in predictions]\n    prices = [p[\"price\"] for p in predictions]\n    \n    plt.figure(figsize=(10, 5))\n    plt.plot(dates, prices, marker='o', linewidth=2, markersize=8, color='#2ecc71')\n    plt.fill_between(range(len(dates)), prices, alpha=0.3, color='#2ecc71')\n    plt.title(f'{crop_type.capitalize()} Price Prediction - Next 7 Days', fontsize=14, fontweight='bold')\n    plt.xlabel('Date', fontsize=11)\n    plt.ylabel('Price (‚Çπ/quintal)', fontsize=11)\n    plt.xticks(rotation=45)\n    plt.grid(True, alpha=0.3)\n    plt.tight_layout()\n    \n    img = io.BytesIO()\n    plt.savefig(img, format='png', dpi=100, bbox_inches='tight')\n    img.seek(0)\n    plt.close()\n    \n    return base64.b64encode(img.getvalue()).decode()\n\ndef get_crop_advisory(crop_type):\n    advisories = {\n        \"soybean\": {\n            \"weather\": \"Moderate rainfall expected. Good for growth.\",\n            \"pest_risk\": \"Low risk of pod borer. Monitor regularly.\",\n            \"sowing_time\": \"Best: June-July (Kharif season)\",\n            \"harvest_time\": \"October-November\",\n            \"tips\": \"Ensure proper drainage to prevent waterlogging\"\n        },\n        \"groundnut\": {\n            \"weather\": \"Warm and humid conditions favorable.\",\n            \"pest_risk\": \"Medium risk of leaf miner. Use neem spray.\",\n            \"sowing_time\": \"Best: May-June (Kharif) or Nov-Dec (Rabi)\",\n            \"harvest_time\": \"September-October (Kharif) or March-April (Rabi)\",\n            \"tips\": \"Calcium application improves pod development\"\n        },\n        \"mustard\": {\n            \"weather\": \"Cool weather optimal. Avoid frost.\",\n            \"pest_risk\": \"Aphid alert! Monitor and use organic pesticides.\",\n            \"sowing_time\": \"Best: October-November (Rabi season)\",\n            \"harvest_time\": \"February-March\",\n            \"tips\": \"Light irrigation needed during pod formation\"\n        },\n        \"sunflower\": {\n            \"weather\": \"Sunny conditions ideal. Drought resistant.\",\n            \"pest_risk\": \"Low pest pressure. Watch for caterpillars.\",\n            \"sowing_time\": \"Best: January-February or June-July\",\n            \"harvest_time\": \"April-May or October-November\",\n            \"tips\": \"Ensure adequate phosphorus for better yield\"\n        }\n    }\n    \n    return advisories.get(crop_type.lower(), advisories[\"soybean\"])\n\ndef generate_ai_insights(stats):\n    insights = []\n    \n    if stats[\"total_transactions\"] > 10:\n        insights.append({\n            \"type\": \"success\",\n            \"message\": f\"Platform activity is strong with {stats['total_transactions']} transactions completed!\"\n        })\n    \n    if \"mustard\" in stats[\"crops_summary\"]:\n        insights.append({\n            \"type\": \"info\",\n            \"message\": \"Mustard oil prices expected to rise by 5% next week due to increased demand.\"\n        })\n    \n    if \"soybean\" in stats[\"crops_summary\"]:\n        insights.append({\n            \"type\": \"warning\",\n            \"message\": \"Soybean output may be affected by delayed monsoon in some regions.\"\n        })\n    \n    insights.append({\n        \"type\": \"info\",\n        \"message\": \"Government procurement at MSP available for all major oilseeds.\"\n    })\n    \n    insights.append({\n        \"type\": \"success\",\n        \"message\": \"FPO network expansion improving farmer access to better prices by 15%.\"\n    })\n    \n    return insights\n\ndef get_ai_chat_response(user_message):\n    message_lower = user_message.lower()\n    \n    responses = {\n        \"price\": \"Current oilseed prices are competitive! Check the price prediction chart for upcoming trends. Selling during peak demand periods can increase your profits by 10-15%.\",\n        \"weather\": \"Weather conditions are favorable for most oilseed crops this season. However, ensure proper drainage and monitor for unexpected rainfall.\",\n        \"pest\": \"For pest management, use integrated pest management (IPM) techniques. Neem-based organic pesticides are effective and eco-friendly. Regular field monitoring is key!\",\n        \"fertilizer\": \"For optimal oilseed yield, use balanced NPK fertilizers. Phosphorus is especially important for groundnut and sunflower. Consider soil testing for precise application.\",\n        \"sell\": \"The best time to sell depends on market demand and storage capacity. Use our AI price predictor to identify optimal selling windows. Consider forward contracts with FPOs for price security.\",\n        \"subsidy\": \"Government subsidies are available for quality seeds, organic farming, and mechanization. Visit your nearest agriculture office or FPO for details on PM-KUSUM and other schemes.\",\n        \"storage\": \"Proper storage is crucial! Ensure moisture content is below 8-10% before storage. Use clean, dry warehouses and check for pest infestation regularly.\",\n        \"insurance\": \"Pradhan Mantri Fasal Bima Yojana (PMFBY) covers oilseed crops. Enroll during sowing season for comprehensive risk coverage at subsidized premiums.\",\n        \"quality\": \"Maintain quality by: proper drying, clean storage, avoiding mixing varieties, and timely harvesting. Quality premium can fetch you 10-20% higher prices!\",\n        \"credit\": \"Kisan Credit Cards offer easy access to crop loans at low interest rates. FPOs also provide credit facilities. Contact your nearest bank or FPO for assistance.\"\n    }\n    \n    for keyword, response in responses.items():\n        if keyword in message_lower:\n            return response\n    \n    return \"I'm here to help with oilseed farming, pricing, weather, pest management, and market insights. Try asking about prices, weather conditions, pest control, or selling strategies!\"\n","size_bytes":6622},"blockchain.py":{"content":"import hashlib\nimport json\nfrom datetime import datetime\n\nclass Block:\n    def __init__(self, index, timestamp, farmer_name, crop_type, quantity, price, previous_hash):\n        self.index = index\n        self.timestamp = timestamp\n        self.farmer_name = farmer_name\n        self.crop_type = crop_type\n        self.quantity = quantity\n        self.price = price\n        self.previous_hash = previous_hash\n        self.hash = self.calculate_hash()\n    \n    def calculate_hash(self):\n        block_string = json.dumps({\n            \"index\": self.index,\n            \"timestamp\": str(self.timestamp),\n            \"farmer_name\": self.farmer_name,\n            \"crop_type\": self.crop_type,\n            \"quantity\": self.quantity,\n            \"price\": self.price,\n            \"previous_hash\": self.previous_hash\n        }, sort_keys=True)\n        return hashlib.sha256(block_string.encode()).hexdigest()\n    \n    def to_dict(self):\n        return {\n            \"index\": self.index,\n            \"timestamp\": str(self.timestamp),\n            \"farmer_name\": self.farmer_name,\n            \"crop_type\": self.crop_type,\n            \"quantity\": self.quantity,\n            \"price\": self.price,\n            \"previous_hash\": self.previous_hash,\n            \"hash\": self.hash\n        }\n\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n        self.create_genesis_block()\n    \n    def create_genesis_block(self):\n        genesis_block = Block(0, datetime.now(), \"System\", \"Genesis\", 0, 0, \"0\")\n        self.chain.append(genesis_block)\n    \n    def get_latest_block(self):\n        return self.chain[-1]\n    \n    def add_transaction(self, farmer_name, crop_type, quantity, price):\n        index = len(self.chain)\n        timestamp = datetime.now()\n        previous_hash = self.get_latest_block().hash\n        new_block = Block(index, timestamp, farmer_name, crop_type, quantity, price, previous_hash)\n        self.chain.append(new_block)\n        return new_block\n    \n    def is_chain_valid(self):\n        for i in range(1, len(self.chain)):\n            current_block = self.chain[i]\n            previous_block = self.chain[i - 1]\n            \n            if current_block.hash != current_block.calculate_hash():\n                return False\n            \n            if current_block.previous_hash != previous_block.hash:\n                return False\n        \n        return True\n    \n    def get_all_transactions(self):\n        return [block.to_dict() for block in self.chain[1:]]\n    \n    def get_statistics(self):\n        if len(self.chain) <= 1:\n            return {\n                \"total_transactions\": 0,\n                \"total_volume\": 0,\n                \"crops_summary\": {},\n                \"total_value\": 0\n            }\n        \n        total_volume = 0\n        total_value = 0\n        crops_summary = {}\n        \n        for block in self.chain[1:]:\n            total_volume += block.quantity\n            total_value += block.quantity * block.price\n            \n            if block.crop_type in crops_summary:\n                crops_summary[block.crop_type][\"quantity\"] += block.quantity\n                crops_summary[block.crop_type][\"count\"] += 1\n            else:\n                crops_summary[block.crop_type] = {\n                    \"quantity\": block.quantity,\n                    \"count\": 1\n                }\n        \n        return {\n            \"total_transactions\": len(self.chain) - 1,\n            \"total_volume\": total_volume,\n            \"crops_summary\": crops_summary,\n            \"total_value\": total_value\n        }\n","size_bytes":3541},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.3.0\",\n    \"flask>=3.1.2\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"matplotlib>=3.10.7\",\n    \"pillow>=12.0.0\",\n    \"psycopg2-binary>=2.9.11\",\n    \"reportlab>=4.4.4\",\n]\n","size_bytes":352},"pdf_generator.py":{"content":"from reportlab.lib.pagesizes import letter, A4\nfrom reportlab.lib import colors\nfrom reportlab.lib.units import inch\nfrom reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image\nfrom reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\nfrom reportlab.lib.enums import TA_CENTER, TA_LEFT\nfrom datetime import datetime\nimport io\n\ndef generate_transaction_report(blockchain, filename=\"report.pdf\"):\n    buffer = io.BytesIO()\n    doc = SimpleDocTemplate(buffer, pagesize=A4)\n    elements = []\n    styles = getSampleStyleSheet()\n    \n    title_style = ParagraphStyle(\n        'CustomTitle',\n        parent=styles['Heading1'],\n        fontSize=24,\n        textColor=colors.HexColor('#2ecc71'),\n        alignment=TA_CENTER,\n        spaceAfter=30\n    )\n    \n    heading_style = ParagraphStyle(\n        'CustomHeading',\n        parent=styles['Heading2'],\n        fontSize=16,\n        textColor=colors.HexColor('#27ae60'),\n        spaceAfter=12\n    )\n    \n    title = Paragraph(\"Oilseed Value Chain Platform\", title_style)\n    elements.append(title)\n    \n    subtitle = Paragraph(f\"Transaction Report - {datetime.now().strftime('%B %d, %Y')}\", styles['Normal'])\n    elements.append(subtitle)\n    elements.append(Spacer(1, 20))\n    \n    stats = blockchain.get_statistics()\n    \n    summary_heading = Paragraph(\"Summary Statistics\", heading_style)\n    elements.append(summary_heading)\n    \n    summary_data = [\n        [\"Metric\", \"Value\"],\n        [\"Total Transactions\", str(stats['total_transactions'])],\n        [\"Total Volume (kg)\", f\"{stats['total_volume']:,.2f}\"],\n        [\"Total Value (‚Çπ)\", f\"{stats['total_value']:,.2f}\"],\n        [\"Blockchain Status\", \"Valid ‚úì\" if blockchain.is_chain_valid() else \"Invalid ‚úó\"]\n    ]\n    \n    summary_table = Table(summary_data, colWidths=[3*inch, 3*inch])\n    summary_table.setStyle(TableStyle([\n        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2ecc71')),\n        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n        ('FONTSIZE', (0, 0), (-1, 0), 12),\n        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n        ('GRID', (0, 0), (-1, -1), 1, colors.black)\n    ]))\n    elements.append(summary_table)\n    elements.append(Spacer(1, 20))\n    \n    trans_heading = Paragraph(\"Transaction Details\", heading_style)\n    elements.append(trans_heading)\n    \n    transactions = blockchain.get_all_transactions()\n    \n    if transactions:\n        trans_data = [[\"Farmer\", \"Crop\", \"Quantity (kg)\", \"Price (‚Çπ)\", \"Date\"]]\n        \n        for trans in transactions[-10:]:\n            trans_data.append([\n                trans['farmer_name'],\n                trans['crop_type'],\n                f\"{trans['quantity']:,.2f}\",\n                f\"{trans['price']:,.2f}\",\n                trans['timestamp'].split()[0]\n            ])\n        \n        trans_table = Table(trans_data, colWidths=[1.5*inch, 1.2*inch, 1.2*inch, 1.2*inch, 1.5*inch])\n        trans_table.setStyle(TableStyle([\n            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#27ae60')),\n            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n            ('FONTSIZE', (0, 0), (-1, 0), 10),\n            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),\n            ('GRID', (0, 0), (-1, -1), 1, colors.black),\n            ('FONTSIZE', (0, 1), (-1, -1), 8)\n        ]))\n        elements.append(trans_table)\n    else:\n        elements.append(Paragraph(\"No transactions recorded yet.\", styles['Normal']))\n    \n    elements.append(Spacer(1, 30))\n    footer = Paragraph(\"Generated by AI-Enabled Oilseed Value Chain Platform\", styles['Italic'])\n    elements.append(footer)\n    \n    doc.build(elements)\n    buffer.seek(0)\n    return buffer\n\ndef generate_farmer_report(farmer_name, crop_type, quantity, price, predictions, badges):\n    buffer = io.BytesIO()\n    doc = SimpleDocTemplate(buffer, pagesize=A4)\n    elements = []\n    styles = getSampleStyleSheet()\n    \n    title_style = ParagraphStyle(\n        'CustomTitle',\n        parent=styles['Heading1'],\n        fontSize=24,\n        textColor=colors.HexColor('#2ecc71'),\n        alignment=TA_CENTER,\n        spaceAfter=30\n    )\n    \n    title = Paragraph(\"Farmer Performance Report\", title_style)\n    elements.append(title)\n    \n    subtitle = Paragraph(f\"Report for {farmer_name} - {datetime.now().strftime('%B %d, %Y')}\", styles['Normal'])\n    elements.append(subtitle)\n    elements.append(Spacer(1, 20))\n    \n    info_data = [\n        [\"Farmer Name\", farmer_name],\n        [\"Crop Type\", crop_type],\n        [\"Quantity Sold (kg)\", f\"{quantity:,.2f}\"],\n        [\"Price (‚Çπ/quintal)\", f\"{price:,.2f}\"],\n        [\"Total Earnings (‚Çπ)\", f\"{(quantity * price / 100):,.2f}\"]\n    ]\n    \n    info_table = Table(info_data, colWidths=[2.5*inch, 3.5*inch])\n    info_table.setStyle(TableStyle([\n        ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#27ae60')),\n        ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),\n        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),\n        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),\n        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n        ('BACKGROUND', (1, 0), (1, -1), colors.lightgrey)\n    ]))\n    elements.append(info_table)\n    elements.append(Spacer(1, 20))\n    \n    if badges:\n        badge_para = Paragraph(f\"<b>Badges Earned:</b> {', '.join(badges)}\", styles['Normal'])\n        elements.append(badge_para)\n        elements.append(Spacer(1, 20))\n    \n    pred_heading = Paragraph(\"<b>Price Predictions (Next 7 Days)</b>\", styles['Heading2'])\n    elements.append(pred_heading)\n    \n    pred_data = [[\"Date\", \"Predicted Price (‚Çπ/quintal)\"]]\n    for pred in predictions:\n        pred_data.append([pred['date'], f\"{pred['price']:,.2f}\"])\n    \n    pred_table = Table(pred_data, colWidths=[3*inch, 3*inch])\n    pred_table.setStyle(TableStyle([\n        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2ecc71')),\n        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n        ('GRID', (0, 0), (-1, -1), 1, colors.black),\n        ('BACKGROUND', (0, 1), (-1, -1), colors.beige)\n    ]))\n    elements.append(pred_table)\n    \n    elements.append(Spacer(1, 30))\n    footer = Paragraph(\"Thank you for being part of the Oilseed Value Chain Platform!\", styles['Italic'])\n    elements.append(footer)\n    \n    doc.build(elements)\n    buffer.seek(0)\n    return buffer\n","size_bytes":6726},"replit.md":{"content":"# AI-Enabled Value Chain Platform for Oilseed Self-Reliance\n\n## Project Overview\nThis is a comprehensive web-based prototype platform designed to enhance India's oilseed self-reliance by connecting farmers, FPOs/processors, and policymakers through AI-powered analytics and blockchain-based traceability.\n\n**Created:** October 22, 2025\n**Technology Stack:** Flask (Python), HTML/CSS/JavaScript, Chart.js, Matplotlib, ReportLab\n\n## Goal\nCreate a visually appealing, interactive, and informative prototype that demonstrates how AI and Blockchain can enhance India's oilseed self-reliance through smarter production, logistics, and policy decisions.\n\n## Key Features\n\n### 1. Three Role-Based Dashboards\n- **Farmer Dashboard**: AI price prediction, crop advisory, selling interface, gamified badges, AI chatbot, **multilingual support (English/Hindi/Telugu/Tamil)**, **voice assistant**, **interactive map with farmers/buyers/warehouses**\n- **FPO/Processor Dashboard**: Blockchain transaction log, warehouse management, Chart.js visualizations\n- **Policymaker/Admin Dashboard**: National analytics, AI insights, logistics visualization, policy recommendations\n\n### 2. AI Module (Simulated)\n- Mock ML-based price prediction for 7 days ahead\n- Matplotlib-generated price trend charts\n- AI insight cards with market predictions\n- AI Assistant chatbox with agricultural advisory responses\n\n### 3. Blockchain Simulation\n- Python-based blockchain with SHA-256 hashing\n- Transaction records with farmer name, crop, price, quantity, timestamp\n- Chain integrity verification\n- Display on FPO and Admin dashboards\n\n### 4. Data Visualizations\n- Chart.js for interactive charts (warehouse capacity, crops by type, price trends, volume traded)\n- Matplotlib for AI price prediction graphs\n- Real-time chart updates\n\n### 5. Gamified Badges System\n- **Smart Seller** üí∞: Achieved when selling at 10% above base price\n- **High Volume Producer** üåæ: Earned for selling 1000+ kg\n- **Loyal Member** ‚≠ê: Given after 5+ transactions\n\n### 6. AI Assistant Chatbox\n- Predefined responses for common farmer queries\n- Topics: pricing, weather, pests, fertilizers, subsidies, storage, insurance, quality, credit\n- Real-time chat interface on farmer dashboard\n\n### 7. PDF Report Generation\n- Transaction reports with blockchain statistics\n- Farmer performance reports with predictions and badges\n- Uses ReportLab for professional PDF output\n\n### 8. Multilingual Support\n- Language selector with support for English, Hindi, Telugu, and Tamil\n- Real-time interface translation\n- Voice recognition in English and Hindi\n- Inclusive design for farmers across India\n\n### 9. Voice Assistant Integration\n- Web Speech API for voice commands\n- Voice-activated crop price prediction\n- Text-to-speech feedback for transactions and predictions\n- Voice input for AI chatbot queries\n- Hands-free operation for farmers\n\n### 10. Interactive Geographic Map\n- Leaflet.js with OpenStreetMap integration\n- Visual markers for:\n  - üü¢ Farmers (green) - showing crop types\n  - üîµ Buyers (blue) - showing demand\n  - üü† Marketplaces/Warehouses (orange) - showing capacity\n- Search functionality to find nearby farms, buyers, or warehouses\n- Popup information cards with location details\n- Smooth animations and zoom controls\n- Responsive design matching dashboard theme\n- Centered on India with pan and zoom capabilities\n\n## Project Structure\n\n```\n.\n‚îú‚îÄ‚îÄ app.py                    # Main Flask application\n‚îú‚îÄ‚îÄ blockchain.py             # Blockchain simulation module\n‚îú‚îÄ‚îÄ ai_predictor.py          # AI price prediction and advisory\n‚îú‚îÄ‚îÄ pdf_generator.py         # PDF report generation\n‚îú‚îÄ‚îÄ templates/\n‚îÇ   ‚îú‚îÄ‚îÄ base.html            # Base template with navbar\n‚îÇ   ‚îú‚îÄ‚îÄ index.html           # Home page\n‚îÇ   ‚îú‚îÄ‚îÄ farmer.html          # Farmer dashboard\n‚îÇ   ‚îú‚îÄ‚îÄ fpo.html            # FPO dashboard\n‚îÇ   ‚îî‚îÄ‚îÄ admin.html          # Admin dashboard\n‚îú‚îÄ‚îÄ static/\n‚îÇ   ‚îú‚îÄ‚îÄ css/                # CSS files\n‚îÇ   ‚îî‚îÄ‚îÄ js/                 # JavaScript files\n‚îî‚îÄ‚îÄ replit.md               # This file\n```\n\n## API Endpoints\n\n- `GET /` - Home page with role selection\n- `GET /farmer` - Farmer dashboard\n- `GET /fpo` - FPO/Processor dashboard\n- `GET /admin` - Policymaker/Admin dashboard\n- `POST /api/predict-price` - Get AI price predictions\n- `POST /api/sell-crop` - Record crop sale on blockchain\n- `POST /api/chat` - AI chatbot responses\n- `GET /api/blockchain-status` - Blockchain validation status\n- `GET /download-report` - Generate and download PDF reports\n\n## Supported Crops\n1. Soybean (Base price: ‚Çπ4,500/quintal)\n2. Groundnut (Base price: ‚Çπ5,200/quintal)\n3. Mustard (Base price: ‚Çπ6,000/quintal)\n4. Sunflower (Base price: ‚Çπ5,800/quintal)\n\n## Design Theme\n- **Color Palette**: Green (#2ecc71, #27ae60), White, Light Brown, Blue gradients\n- **Style**: Modern, responsive, nature-themed\n- **UI Elements**: Cards with shadows, rounded corners, gradient backgrounds, icons from Font Awesome\n- **Responsive**: Works on mobile and desktop devices\n\n## How to Use\n\n### For Farmers:\n1. Visit the Farmer Dashboard\n2. Select your crop type and view AI price predictions\n3. Check crop advisory for weather, pest alerts, and farming tips\n4. Enter your details and sell your crop to record it on the blockchain\n5. Earn badges for smart selling decisions\n6. Use the AI Assistant for farming advice\n7. Download your performance report\n\n### For FPOs:\n1. Visit the FPO Dashboard\n2. View all blockchain transactions from farmers\n3. Monitor warehouse capacity utilization\n4. Analyze crops procured by type\n5. Manage forward contracts\n6. Download comprehensive transaction reports\n\n### For Policymakers:\n1. Visit the Admin Dashboard\n2. View national-level statistics and analytics\n3. Read AI-generated market insights\n4. Monitor price trends across different oilseeds\n5. Review logistics and warehouse distribution\n6. Get policy recommendations\n7. Download national reports\n\n## Running the Application\nThe application runs on port 5000 and is accessible via the webview.\n\n## Future Enhancements\n- Integrate real weather API for live crop advisory\n- Connect to actual commodity price APIs\n- Implement PostgreSQL for persistent storage\n- Add multi-user authentication with role-based access\n- Enhance AI with actual ML models (LSTM/Prophet)\n- Real-time notifications for price alerts\n- Mobile app development\n- Multi-language support (Hindi, regional languages)\n\n## Note\nThis is a prototype demonstration. All AI predictions and blockchain simulations use mock data for demonstration purposes. The platform showcases the potential of integrating AI and blockchain technology in agricultural value chains.\n","size_bytes":6719}},"version":2}